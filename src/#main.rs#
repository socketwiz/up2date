use std::process::Command;
use std::fmt::{self, Formatter, Display};

struct Args<'a, 'b>(&'a[&'b str]);
#[derive(Default)]
struct App<'a> {
    command: &'a str,
    args: &'a[&'a str]
}

impl<'a, 'b> Display for Args<'a, 'b> {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        write!(f, "{}", self.0.join(" "))
    }
}

fn run(apps: &[&App], check: bool) -> bool {
    let mut found: bool = false;

    for app in apps.iter() {
        println!("");
        println!("========================");
        println!("$ {} {}", app.command, Args(app.args));
        println!("========================");

        let child = Command::new(app.command)
            .args(app.args)
            .spawn();

        match child {
            Err(error) => panic!("P1{}", error),
            Ok(mut result) => {
                match result.try_wait() {
                    Err(error) => panic!("P2{}", error),
                    Ok(Some(status)) => println!("S1{}", status),
                    Ok(None) => {
                        let wait = result.wait();

                        match wait {
                            Err(error) => panic!("P3{}", error),
                            Ok(status) => {
                                if status.success() == false && check == true {
                                    found = true;
                                }
                            }
                        }
                    }
                };
            }
        };
    }

    found
}

fn main() {
    let pacman_keyring = App {
        command: "sudo",
        args: &["pacman", "--noconfirm", "-S", "archlinux-keyring"]
    };
    let pacman_update = App {
        command: "sudo",
        args: &["pacman", "--noconfirm", "-Syu"]
    };
    let pacman_orphan_check = App {
        command: "pacman",
        args: &["-Qtdq"]
    };
    let pacman_remove_orphans = App {
        command: "sudo",
        args: &["pacman", "--noconfirm", "-Rns", ]
    };
    sudo pacman --noconfirm -Rns $(pacman -Qtdq) # remove orphans
    let yay_update = App {
        command: "yay",
        args: &["-Syu"]
    };
    let yay_cleanup = App {
        command: "yay",
        args: &["-Yc"]
    };
    let _apps: &[&App] = &[&pacman_keyring, &pacman_update, &yay_update, &yay_cleanup];
    let check: &[&App] = &[&pacman_orphan_check];

    //run(apps, false);
    if run(check, true) {
    }
}
